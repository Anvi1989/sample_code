package com.example.demo;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.zip.ZipOutputStream;

public class ZipUnZipFile {

	public static void main(String[] args) throws IOException {
		
		
		  String sourceFile = "D:\\testZip\\Walmart - Evaulation Sheet for Java MS-Sashikala.xlsx" ;
		  FileOutputStream FoS = new FileOutputStream( "D:\\dirCompressed.zip" ) ;
		  ZipOutputStream zipOut = new ZipOutputStream( FoS ) ; File fileToZip = new
		  File( sourceFile ) ;
		  
		  zipFile( fileToZip, fileToZip.getName( ), zipOut ) ; zipOut.close( ) ;
		  FoS.close( ) ;
		 
        
		String zipFilePath = "D:\\dirCompressed.zip" ;  
        String destDir = "D:\\unzip" ;  
        unzipfile( zipFilePath, destDir ) ;  

	}
	
	private static void unzipfile( String zipFilePath, String destDir ) {  
        File dir = new File( destDir ) ;  
        // creating an output directory if it doesn't exist already  
        if( !dir.exists( ) ) dir.mkdirs( ) ;  
        FileInputStream FiS ;  
        // buffer to read and write data in the file  
        byte[ ] buffer = new byte[ 1024 ] ;  
        try {  
            FiS = new FileInputStream( zipFilePath ) ;  
            ZipInputStream ZiS = new ZipInputStream( FiS ) ;  
            ZipEntry ZE = ZiS.getNextEntry( ) ;  
            while( ZE != null ) {  
                String fileName = ZE.getName( ) ;  
                File newFile = new File( destDir + File.separator + fileName ) ;  
                System.out.println( " Unzipping to " + newFile.getAbsolutePath( ) ) ;  
                // create directories for sub directories in zip  
                new File( newFile.getParent( ) ).mkdirs( ) ;  
                FileOutputStream fos = new FileOutputStream( newFile ) ;  
                int len ;  
                while ( ( len = ZiS.read( buffer ) )  > 0 ) {  
                fos.write( buffer, 0, len ) ;  
                }  
                fos.close( ) ;  
                // close this ZipEntry  
                ZiS.closeEntry( ) ;  
                ZE = ZiS.getNextEntry( ) ;  
            }  
            // close last ZipEntry  
            ZiS.closeEntry( ) ;  
            ZiS.close( ) ;  
            FiS.close( ) ;  
        } catch ( IOException e ) {  
            e.printStackTrace( ) ;  
        }  
      } 
	
	private static void zipFile( File fileToZip, String fileName, ZipOutputStream zipOut ) throws IOException {  
        if ( fileToZip.isHidden( ) ) {  
            return ;  
        }  
        if ( fileToZip.isDirectory( ) ) {  
            if (fileName.endsWith( " / " ) ) {  
                zipOut.putNextEntry( new ZipEntry( fileName ) ) ;  
                zipOut.closeEntry( ) ;  
            } else {  
                zipOut.putNextEntry( new ZipEntry( fileName + " / " ) ) ;  
                zipOut.closeEntry( ) ;  
            }  
            File[ ] children = fileToZip.listFiles( ) ;  
            for ( File childFile : children ) {  
                zipFile( childFile, fileName + " / " + childFile.getName( ), zipOut ) ;  
            }  
            return ;  
        }  
        FileInputStream FiS = new FileInputStream( fileToZip ) ;  
        ZipEntry zipEntry = new ZipEntry( fileName ) ;  
        zipOut.putNextEntry( zipEntry ) ;  
        byte[ ] bytes = new byte[ 1024 ] ;  
        int length ;  
        while ( ( length = FiS.read( bytes ) ) >= 0 ) {  
            zipOut.write( bytes, 0, length ) ;  
        }  
        FiS.close( ) ;  
    }  
}  


